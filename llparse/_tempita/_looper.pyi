import sys
from typing import Any, Callable, Iterable, Sequence, TypeVar

__all__ = ['looper']

T = TypeVar("T")
class looper:
    seq: Sequence[T]
    def __init__(self, seq:Sequence[T]) -> None: ...
    def __iter__(self): ...

class looper_iter:
    seq: Sequence[T]
    pos: int
    def __init__(self, seq:Sequence[T]) -> None: ...
    def __iter__(self) -> Iterable[loop_pos]:...
    def __next__(self) -> loop_pos: ...
    if sys.version < "3":
        next = __next__

class loop_pos:
    seq: Sequence[T]
    pos: int
    def __init__(self, seq:Sequence[T], pos:int) -> None: ...
    @property
    def index(self): ...
    @property
    def number(self): ...
    @property
    def item(self): ...
    
    def __next__(self): ...
    if sys.version < "3":
        next = __next__
    @property
    def previous(self): ...
    @property
    def odd(self): ...
    @property
    def even(self): ...
    @property
    def first(self): ...
    @property
    def last(self): ...
    @property
    def length(self): ...

    def first_group(self, getter:  Any | Callable | None = None) -> bool: ...
    def last_group(self, getter: Any | Callable | None = None): ...
